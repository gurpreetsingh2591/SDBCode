package expense.exp.fragment;import android.Manifest;import android.annotation.SuppressLint;import android.app.Dialog;import android.content.DialogInterface;import android.content.Intent;import android.content.pm.PackageManager;import android.database.Cursor;import android.graphics.Bitmap;import android.net.Uri;import android.os.Bundle;import android.os.Environment;import android.provider.MediaStore;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.EditText;import android.widget.RelativeLayout;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.core.app.ActivityCompat;import androidx.fragment.app.Fragment;import androidx.recyclerview.widget.RecyclerView;import com.bumptech.glide.Glide;import com.squareup.picasso.Picasso;import com.wang.avi.AVLoadingIndicatorView;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileOutputStream;import java.io.InputStream;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Locale;import java.util.Objects;/*import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;import butterknife.Unbinder;*/import de.hdodenhof.circleimageview.CircleImageView;import expense.exp.R;import expense.exp.activity.Home_Activity;import expense.exp.databinding.LayoutAccountantBinding;import expense.exp.databinding.LayoutProfileBinding;import expense.exp.helper.SharedPrefManager;import expense.exp.internet.ApiClient;import expense.exp.internet.ApiInterface;import expense.exp.internet.model.Status;import expense.exp.internet.model.User;import expense.exp.internet.model.UserInfo;import expense.exp.model_class.CollegeResponse.CollProgramList;import expense.exp.model_class.CollegeResponse.CollegeProgramListResponse;import expense.exp.model_class.StudentDataModal;import expense.exp.model_class.UserIfo;import expense.exp.toast.CustomToast;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.observers.DisposableSingleObserver;import io.reactivex.schedulers.Schedulers;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.RequestBody;/** * Created by admin on 06-07-2018. */public class Profile_Fragment extends Fragment implements AdapterView.OnItemSelectedListener {    private final int PICK_IMAGE_CAMERA = 1, PICK_IMAGE_GALLERY = 2;    View view;    File image_file = null;    SharedPrefManager sharedPrefManager;    private Bitmap bitmap;    private String imgPath = null;    String id = "";    String item = null;    String itemNew = null;    private int toUpdate = -1;    public static Profile_Fragment newInstance() {        return new Profile_Fragment();    }    List<CollProgramList> collageList = new ArrayList<>();    List<CollProgramList> list = new ArrayList<>();    StudentDataModal studentDataModal;    LayoutProfileBinding binding;    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        //view = inflater.inflate(R.layout.layout_profile, container, false);        binding = LayoutProfileBinding.inflate(inflater, container, false);        // unbinder = ButterKnife.bind(this, view);        sharedPrefManager = new SharedPrefManager(getActivity());        User user = sharedPrefManager.getuserinfo();        studentDataModal = sharedPrefManager.getStudentinfo();//        Log.d("clg",studentDataModal.getCollege());//        Log.d("user_name", studentDataModal.getProgram());        user_info((user.getId()), 0);        Log.d("user_id", user.getId());        binding.username.setText(user.getName());        binding.emailId.setText(user.getEmail());        binding.state.setText(user.getProvince());        /*collegetypeSpinner = view.findViewById(R.id.collegetypeSpinner);        fieldtypeSpinner = view.findViewById(R.id.fieldtypeSpinner);        colg_name_layout = view.findViewById(R.id.colg_name_layout);        state_lay = view.findViewById(R.id.state_lay);        col_layout = view.findViewById(R.id.col_layout);        tv_colg = view.findViewById(R.id.tv_colg);*/        binding.fieldtypeSpinner.setOnItemSelectedListener(this);        binding.collegetypeSpinner.setOnItemSelectedListener(this);        if (sharedPrefManager.getuserinfo().getType().equals("user")) {            binding.colLayout.setVisibility(View.GONE);            binding.colgNameLayout.setVisibility(View.GONE);            binding.stateLay.setVisibility(View.VISIBLE);        } else {            binding.colLayout.setVisibility(View.VISIBLE);            binding.colgNameLayout.setVisibility(View.VISIBLE);            binding.stateLay.setVisibility(View.GONE);        }        Log.e("user_type", sharedPrefManager.getuserinfo().getType());        if (!user.getMobile().matches("0")) {            binding.phone.setText(user.getMobile());        }        List<String> categories = new ArrayList<String>();        categories.add("college");        categories.add("program");        // Creating adapter for spinner        ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(getActivity(), android.R.layout.simple_spinner_item, categories);        // Drop down layout style - list view with radio button        dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);        // attaching data adapter to spinner        binding.fieldtypeSpinner.setAdapter(dataAdapter);        getList("college");        getListProgram("program");//        Log.d("debugging", "url old = " + "http://sdb.topnotchhub.com/assets/uploads/docs" + user.getImage());        Log.d("debugging", "url old = " + "https://skipdaboxes.ca/assets/uploads/docs" + user.getImage());        String path = sharedPrefManager.getImageUrl();        Log.d("debugging", "url new = " + path + user.getImage());        /*if (path.isEmpty())            Picasso.get()                    .load("http://sdb.topnotchhub.com/assets/uploads/docs/"                            + user.getImage())                    .placeholder(R.drawable.user_profile_icon)                    .error(R.drawable.user_profile_icon)                    .into(profile_image);        else            Picasso.get()                    .load(path + user.getImage())                    .placeholder(R.drawable.user_profile_icon)                    .error(R.drawable.user_profile_icon)                    .into(profile_image);*/        //  state.setText(user.get());        initUI();        return binding.getRoot();    }    private void initUI(){        binding.saveBtn.setOnClickListener(this::save);        binding.profileImage.setOnClickListener(this::profile_image);    }    private void loadImage(String path, String imageObj) {//        Log.e("tetsttt",path+imageObj);//        Glide.with(getActivity()).load(path+imageObj).into(profile_image);//        String pathh= "http://sdb.topnotchhub.com//assets/uploads/avatar/";        String pathh = "https://skipdaboxes.ca//assets/uploads/avatar/";        Picasso.get().load(pathh + imageObj).placeholder(R.drawable.user_profile_icon).resize(100, 100).into(binding.profileImage);//        Picasso.get()//                .load(path+imageObj)//                .placeholder(R.drawable.user_profile_icon)//                .error(R.drawable.user_profile_icon)//                .into(profile_image);    }    @Override    public void onDestroyView() {        super.onDestroyView();        // unbind the view to free some memory        // unbinder.unbind();    }    @SuppressLint("CheckResult")    public void user_info(String userid, int toUpdate) {        ApiInterface apiService = ApiClient.getClient(getActivity())                .create(ApiInterface.class);        apiService.getuserInfo(userid)                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribeWith(new DisposableSingleObserver<UserInfo>() {                    @Override                    public void onSuccess(UserInfo login) {                        if (login.getStatus().matches("1")) {                            StudentDataModal studentDataModal = login.getStudent();                            sharedPrefManager.serUser_info(login.getUser());                            sharedPrefManager.setImageUrl(login.getImageurl());                            sharedPrefManager.setUserReferalLink(login.getReferlink());                            if (studentDataModal != null) {                                sharedPrefManager.setStudent_info(studentDataModal);                            }//                            loadImage(login.getImageurl(),login.getUser().getImage());                            if (login.getImageurl() != null && login.getUser().getImage() != null)                                loadImage(login.getImageurl(), login.getUser().getImage());                            else                                binding.profileImage.setImageResource(R.drawable.user_profile_icon);                            //if (toUpdate == 1)                             //   ((Home_Activity) requireActivity()).bottomNavigationView.setSelectedItemId(R.id.check_folder);                        }                    }                    @Override                    public void onError(Throwable e) {                        // Network error                        Log.e("ERR ", e.toString());                        handleStudentObj(userid, toUpdate);                    }                });    }    @SuppressLint("CheckResult")    private void handleStudentObj(String userid, int toUpdate) {        ApiInterface apiService = ApiClient.getClient(getActivity())                .create(ApiInterface.class);        apiService.getuserIfo(userid)                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribeWith(new DisposableSingleObserver<UserIfo>() {                    @Override                    public void onSuccess(UserIfo login) {                        if (login.getStatus().matches("1")) {                            StudentDataModal studentDataModal = null;                            sharedPrefManager.serUser_info(login.getUser());                            sharedPrefManager.setImageUrl(login.getImageurl());                            sharedPrefManager.setUserReferalLink(login.getReferlink());                            if (studentDataModal != null)                                sharedPrefManager.setStudent_info(studentDataModal);                            if (login.getImageurl() != null && login.getUser().getImage() != null)                                loadImage(login.getImageurl(), login.getUser().getImage());                            else                                binding.profileImage.setImageResource(R.drawable.user_profile_icon);                            if (toUpdate == 1)                                ((Home_Activity) getActivity()).bottomNavigationView.setSelectedItemId(R.id.check_folder);                        }                    }                    @Override                    public void onError(Throwable e) {                        // Network error                        Log.e("ERR ", e.toString());                    }                });    }    // @OnClick(R.id.profile_image)    public void profile_image(View view) {        try {            if (ActivityCompat.checkSelfPermission(getActivity(),                    android.Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED &&                    ActivityCompat.checkSelfPermission(getActivity(),                            android.Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {                requestPermissions(new String[]{android.Manifest.permission.CAMERA,                                android.Manifest.permission.WRITE_EXTERNAL_STORAGE},                        PICK_IMAGE_CAMERA);            } else {                selectImage();            }        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {        // super.onRequestPermissionsResult(requestCode, permissions, grantResults);        if (requestCode == PICK_IMAGE_CAMERA && grantResults[0] == PackageManager.PERMISSION_GRANTED && grantResults[1] == PackageManager.PERMISSION_GRANTED) {            selectImage();        } else {            // We were not granted permission this time, so don't try to show the contact picker            super.onRequestPermissionsResult(requestCode, permissions, grantResults);        }    }    private void selectImage() {        try {            PackageManager pm = getActivity().getPackageManager();            int hasPerm = pm.checkPermission(Manifest.permission.CAMERA, getActivity().getPackageName());            if (hasPerm == PackageManager.PERMISSION_GRANTED) {                final CharSequence[] options = {"Take Photo", "Choose From Gallery", "Cancel"};                androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(getActivity());                builder.setTitle("Select Option");                builder.setItems(options, (dialog, item) -> {                    if (options[item].equals("Take Photo")) {                        dialog.dismiss();                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                        startActivityForResult(intent, PICK_IMAGE_CAMERA);                    } else if (options[item].equals("Choose From Gallery")) {                        dialog.dismiss();                        Intent pickPhoto = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);                        startActivityForResult(pickPhoto, PICK_IMAGE_GALLERY);                    } else if (options[item].equals("Cancel")) {                        dialog.dismiss();                    }                });                builder.show();            } else                Toast.makeText(getActivity(), "Camera Permission error", Toast.LENGTH_SHORT).show();        } catch (Exception e) {            Toast.makeText(getActivity(), "Camera Permission error", Toast.LENGTH_SHORT).show();            e.printStackTrace();        }    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == PICK_IMAGE_CAMERA) {            try {                Uri selectedImage = data.getData();                bitmap = (Bitmap) data.getExtras().get("data");                ByteArrayOutputStream bytes = new ByteArrayOutputStream();                bitmap.compress(Bitmap.CompressFormat.JPEG, 100, bytes);                Log.e("Activity", "Pick from Camera::>>> ");                String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(new Date());                createDirectoryAndSaveFile(bitmap, "IMG_" + timeStamp + ".jpg");                //imgPath = destination.getAbsolutePath();                binding.profileImage.setImageBitmap(bitmap);            } catch (Exception e) {                e.printStackTrace();            }        } else if (requestCode == PICK_IMAGE_GALLERY) {            if (data != null) {                Uri selectedImage = data.getData();                try {                    bitmap = MediaStore.Images.Media.getBitmap(getActivity().getContentResolver(), selectedImage);                    ByteArrayOutputStream bytes = new ByteArrayOutputStream();                    bitmap.compress(Bitmap.CompressFormat.JPEG, 50, bytes);                    Log.e("Activity", "Pick from Gallery::>>> ");                    imgPath = getRealPathFromURI(selectedImage);                    image_file = new File(imgPath);                    binding.profileImage.setImageBitmap(bitmap);                } catch (Exception e) {                    e.printStackTrace();                }            }        }    }    public String getRealPathFromURI(Uri contentUri) {        String[] proj = {MediaStore.Audio.Media.DATA};        Cursor cursor = getActivity().managedQuery(contentUri, proj, null, null, null);        int column_index = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.DATA);        cursor.moveToFirst();        return cursor.getString(column_index);    }    private void createDirectoryAndSaveFile(Bitmap imageToSave, String fileName) {        File direct = new File(Environment.getExternalStorageDirectory() + "/" + getString(R.string.app_name));        if (!direct.exists()) {            File wallpaperDirectory = new File("/sdcard/" + getString(R.string.app_name) + "/");            wallpaperDirectory.mkdirs();        }        File file = new File(new File("/sdcard/" + getString(R.string.app_name) + "/"), fileName);        if (file.exists()) {            file.delete();        }        try {            FileOutputStream out = new FileOutputStream(file);            imageToSave.compress(Bitmap.CompressFormat.JPEG, 100, out);            out.flush();            out.close();            image_file = file;        } catch (Exception e) {            e.printStackTrace();            image_file = null;        }    }    @SuppressLint("CheckResult")    public void getFiles(int user_id, String name, String email, String mobile, File file) {        startAnim();        MultipartBody.Part multipartBody = null;        RequestBody body_province = null;        RequestBody body_college = null;        RequestBody body_year = null;        RequestBody body_program = null;        Log.d("debugging", "Upload file " + (file == null));        if (file == null) {//            RequestBody requestFile = RequestBody.create(MediaType.parse("multipart/form-data"), "");////             multipartBody = MultipartBody.Part.createFormData("uploadFile","", requestFile);        } else {            RequestBody requestFile = RequestBody.create(MediaType.parse("multipart/form-data"), file);            multipartBody = MultipartBody.Part.createFormData("uploadFile", file.getName(), requestFile);        }        RequestBody body_name = RequestBody.create(MediaType.parse("text/plain"), name);        RequestBody body_email = RequestBody.create(MediaType.parse("text/plain"), email);        RequestBody body_mobile = RequestBody.create(MediaType.parse("text/plain"), mobile);        RequestBody body_id = RequestBody.create(MediaType.parse("text/plain"), String.valueOf(user_id));//        RequestBody body_province = RequestBody.create(MediaType.parse("text/plain"), state.getText().toString());//        RequestBody body_college = RequestBody.create(MediaType.parse("text/plain"), item);//        RequestBody body_year = RequestBody.create(MediaType.parse("text/plain"), itemNew);        if (sharedPrefManager.getuserinfo().getType().equals("user")) {            body_province = RequestBody.create(MediaType.parse("text/plain"), binding.state.getText().toString());        } else {            body_college = RequestBody.create(MediaType.parse("text/plain"), ((CollProgramList) binding.fieldtypeSpinner.getSelectedItem()).getId());            body_year = RequestBody.create(MediaType.parse("text/plain"), "2005");            body_program = RequestBody.create(MediaType.parse("text/plain"), ((CollProgramList) binding.collegetypeSpinner.getSelectedItem()).getId());        }//        body_program = RequestBody.create(MediaType.parse("text/plain"), ((CollProgramList) collegetypeSpinner.getSelectedItem()).getId());        ApiInterface apiService = ApiClient.getClient(getActivity()).create(ApiInterface.class);        apiService.updateProfile(body_id, body_email, body_name, body_province, body_mobile, body_college, body_year, body_program, multipartBody)                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribeWith(new DisposableSingleObserver<Status>() {                    @Override                    public void onSuccess(Status status) {                        if (status.getStatus().matches("1")) {                            stopAnim();                            Toast.makeText(getActivity(), "" + status.getMessage(), Toast.LENGTH_SHORT).show();//                            getActivity().finish();                            toUpdate = 1;                            user_info(sharedPrefManager.getuserinfo().getId(), toUpdate);                        } else {                            Toast.makeText(getActivity(), status.getMessage(), Toast.LENGTH_LONG).show();                            stopAnim();                        }                    }                    @Override                    public void onError(Throwable e) {                        stopAnim();                        Log.d("Throwable_", e.getMessage());                    }                });    }    void startAnim() {        binding.viewLoding.setVisibility(View.VISIBLE);        binding.avi.show();        // or avi.smoothToShow();    }    void stopAnim() {        if (binding.avi != null)            binding.avi.hide();        binding.viewLoding.setVisibility(View.GONE);        // or avi.smoothToHide();    }    // @OnClick(R.id.save_btn)    public void save(View view) {        if (checkValidation()) {            String username_s = binding.username.getText().toString();            String email_s = binding.emailId.getText().toString();            String phone_s = binding.phone.getText().toString();            getFiles(Integer.parseInt(sharedPrefManager.getuserinfo().getId()), username_s, email_s, phone_s, image_file);        }    }    // Check Validation Method    private boolean checkValidation() {        String getusername = binding.username.getText().toString();        String getemail = binding.emailId.getText().toString();        String getphone = binding.phone.getText().toString();        if (getusername.equals("") || getusername.length() == 0 || getemail.equals("") || getemail.length() == 0 || getphone.equals("") || getphone.length() == 0        ) {            new CustomToast().Show_Toast(getActivity(), view,                    "All fields are required.");            return false;        } else {            return true;        }    }    // @OnClick(R.id.back_icon)    public void back_press(View view) {      //  Home_Activity.viewPager.setCurrentItem(1, true);    }    @Override    public void setUserVisibleHint(boolean isVisibleToUser) {        super.setUserVisibleHint(isVisibleToUser);        if (isVisibleToUser) {            getFragmentManager().beginTransaction().detach(this).attach(this).commit();        }    }    @Override    public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {        if (adapterView.getId() == R.id.fieldtypeSpinner) {            item = adapterView.getItemAtPosition(i).toString();        } else if (adapterView.getId() == R.id.collegetypeSpinner) {            itemNew = adapterView.getItemAtPosition(i).toString();            itemNew = list.get(i).getName();        }    }    @Override    public void onNothingSelected(AdapterView<?> adapterView) {    }    private void setAdapter() {        try {            ArrayAdapter dataAdapter = new ArrayAdapter(getActivity(), android.R.layout.simple_spinner_item, collageList);            // Drop down layout style - list view with radio button            dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);            // attaching data adapter to spinner            binding.fieldtypeSpinner.setAdapter(dataAdapter);            if (studentDataModal != null)                binding.fieldtypeSpinner.setSelection(getIndex(studentDataModal.getCollege(), collageList));        } catch (NullPointerException e) {        }    }    private int getIndex(String college, List<CollProgramList> collageList) {        for (int i = 0; i < collageList.size(); i++)            if (collageList.get(i).getId().equals(college))                return i;        return 0;    }    private void setProgramAdapter() {        ArrayAdapter dataAdapter = new ArrayAdapter(getActivity(), android.R.layout.simple_spinner_item, list);        // Drop down layout style - list view with radio button        dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);        // attaching data adapter to spinner        binding.collegetypeSpinner.setAdapter(dataAdapter);        if (studentDataModal != null)            binding.collegetypeSpinner.setSelection(getIndex(studentDataModal.getProgram(), list));    }    @SuppressLint("CheckResult")    public void getList(String field) {        startAnim();        ApiInterface apiService = ApiClient.getClient(getActivity())                .create(ApiInterface.class);        apiService.CollProgList(field)                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribeWith(new DisposableSingleObserver<CollegeProgramListResponse>() {                    @Override                    public void onSuccess(CollegeProgramListResponse getFolders) {                        if (getFolders.getStatus().matches("1")) {                            stopAnim();                            collageList = new ArrayList<>();                            try {                                collageList = getFolders.getList();                                CollProgramList collProgramList = new CollProgramList();                                collageList.add(collProgramList);                                Log.e("##########Lidt#########", String.valueOf(collageList.size()));                                setAdapter();                            } catch (NullPointerException e) {                            }                            // TODO: 19-12-2018 Folder Details                        } else {                            stopAnim();                        }                    }                    @Override                    public void onError(Throwable e) {                        stopAnim();                    }                });    }    @SuppressLint("CheckResult")    public void getListProgram(String field) {        startAnim();        ApiInterface apiService = ApiClient.getClient(getActivity())                .create(ApiInterface.class);        apiService.CollProgList(field)                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribeWith(new DisposableSingleObserver<CollegeProgramListResponse>() {                    @Override                    public void onSuccess(CollegeProgramListResponse getFolders) {                        if (getFolders.getStatus().matches("1")) {                            stopAnim();                            Log.e("#########new##########", getFolders.getStatus());                            list = getFolders.getList();                            CollProgramList collProgramList = new CollProgramList();                            list.add(collProgramList);                            Log.e("#########new##########", String.valueOf(list));                            try {                                setProgramAdapter();                            } catch (NullPointerException e) {                            }                            // TODO: 19-12-2018 Folder Details                        } else {                            stopAnim();                        }                    }                    @Override                    public void onError(Throwable e) {                        stopAnim();                    }                });    }    private int getIndex(int id) {        return 0;    }}